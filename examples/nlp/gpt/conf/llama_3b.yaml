defaults:
  - optional tp_overlap@model.ub_tp_comm_overlap_cfg:

trainer:
  num_nodes: 1
  devices: 4
  accelerator: gpu
  precision: bf16

  # rm specific args
  rm:
    max_epochs: 2
    max_steps: -1
    val_check_interval: 1000
    save_interval: 1000
    # =================== Begin of Added ===================
    train_random_sampler: True # whether you want to randomly shuffle train set
    val_random_sampler: False # whether you want to randomly shuffle val set
    # =================== End of Added ===================

    # how many GBS we loop over
    # set to float for a percentage
    # of the validation dataset
    limit_val_batches: 1.0
    gradient_clip_val: 1.0

  # do not change these
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_time: null
  max_epochs: ${.rm.max_epochs}
  max_steps: ${.rm.max_steps}

exp_manager:
  explicit_log_dir: /results
  exp_dir: null
  name: megatron_gpt
  max_time_per_run: ${trainer.max_time}
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: nemo_aligner_rm
    name: rlhf_gpt3_rm_2b
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 3
    mode: min
    always_save_nemo: False # saves nemo file during validation, not implemented for model parallel
    save_nemo_on_train_end: True # not recommended when training large models on clusters with short time limits
    filename: 'megatron_gpt--{${.monitor}:.3f}-{step}-{consumed_samples}-{epoch}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}

pretrained_checkpoint:
  restore_from_path: null

model:  # taken from LLAMA hf to nemo conversion script output
  mcore_gpt: true
  micro_batch_size: 1
  global_batch_size: 8
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1
  virtual_pipeline_model_parallel_size: null

  # =================== BiDorm Hyperparameters ===================
  use_weighted_training: False
  tau: 1.0  # for bilevel optimization
  init_alpha: 1.0  # for bilevel optimization
  optim_samp: # optimizer config for sampling probabilities
    lr: 0.001
    weight_decay: 0.0

  # =================== Begin of Added ===================
  # looks like these are not generated from the model conversion
  reward_model_type: binary_ranking # ["binary_ranking, "regression"]
  regression:
    num_attributes: 1 # dimension of regression head
    merge_attributes: False # whether to merge multiple attributes into a scalar
    attribute_weights: null # apply these weights to each attributes when merging them into a scalar
    loss_mask_val: -100 #  mask dimensions with this value when calculating MSE loss
    load_rm_head_weights: False # [False, True] False only loads base model while True loads rm_head weights as well (useful for intializing rm_head with model containing existing rm_head)
  output_sequence: False  # Whether to output a single scalar or a sequence of scalars.
  use_avg_pool: False  # Whether to use avg pool to sum across the sequence dim in reward model
  force_head_dtype: float32  # enforce specific dtype for the final projection in the model head
  # =================== End of Added ===================

  # =================== Begin of Modified ===================
#  encoder_seq_length: 131072
#  max_position_embeddings: 131072
  encoder_seq_length: 4096  # modified to reduce GPU mem
  max_position_embeddings: ${model.encoder_seq_length}
  # =================== End of Modified ===================

  num_layers: 28
  hidden_size: 3072
  ffn_hidden_size: 8192
  num_attention_heads: 24
  init_method_std: 0.02
  use_scaled_init_method: true
  hidden_dropout: 0.0
  attention_dropout: 0.0
  ffn_dropout: 0.0
  kv_channels: null
  apply_query_key_layer_scaling: true
  normalization: rmsnorm
  layernorm_epsilon: 1.0e-05
  do_layer_norm_weight_decay: false
  make_vocab_size_divisible_by: 128
  pre_process: true
  post_process: true
  persist_layer_norm: true
  bias: false
  activation: fast-swiglu
  headscale: false
  transformer_block_type: pre_ln
  openai_gelu: false
  normalize_attention_scores: true
  position_embedding_type: rope
  rotary_percentage: 1.0
  attention_type: multihead
  # =================== Begin of Modified ===================
#  share_embeddings_and_output_weights: false
  share_embeddings_and_output_weights: true  # modified for llama 3.2
  # =================== End of Modified ===================
  overlap_p2p_comm: false
  batch_p2p_comm: true
  num_query_groups: 8
  tokenizer:
    library: huggingface
    type: meta-llama/Llama-3.2-3B-Instruct
    use_fast: true
  native_amp_init_scale: 4294967296
  native_amp_growth_interval: 1000
  hysteresis: 2
  fp32_residual_connection: false
  fp16_lm_cross_entropy: false
  megatron_amp_O2: True
  grad_allreduce_chunk_size_mb: 125
  grad_div_ar_fusion: true
  gradient_accumulation_fusion: false
  bias_activation_fusion: false
  bias_dropout_add_fusion: false
  masked_softmax_fusion: true
  get_attention_mask_from_fusion: true
  apply_rope_fusion: false
  seed: 1234
  resume_from_checkpoint: null
  use_cpu_initialization: false
  onnx_safe: false
  apex_transformer_log_level: 30
  gradient_as_bucket_view: true
  sync_batch_comm: false
  â‰ˆ: null
  activations_checkpoint_method: null
  activations_checkpoint_num_layers: null
  num_micro_batches_with_partial_activation_checkpoints: null
  activations_checkpoint_layers_per_pipeline: null
  sequence_parallel: false
  transformer_engine: true
  fp8: false
  fp8_e4m3: false
  fp8_hybrid: true
  fp8_margin: 0
  fp8_interval: 1
  fp8_amax_history_len: 1024
  fp8_amax_compute_algo: max
  reduce_amax: true
  use_emha: false

  data:
    index_mapping_dir: null
    # =================== Begin of Modified ===================
#    data_impl: mmap
    data_impl: json
    # =================== End of Modified ===================
    splits_string: 900,50,50
    # =================== Begin of Modified ===================
#    seq_length: 131072
    seq_length: ${model.encoder_seq_length}
    # =================== End of Modified ===================
    skip_warmup: true
    num_workers: 2
    dataloader_type: single
    reset_position_ids: false
    reset_attention_mask: false
    eod_mask_loss: false
    validation_drop_last: true
    no_seqlen_plus_one_input_tokens: false
    pad_samples_to_global_batch_size: false
    shuffle_documents: true
    # =================== Begin of Added ===================
    data_prefix: null
    # =================== End of Added ===================

  nsys_profile:
    enabled: false
    start_step: 10
    end_step: 10
    ranks:
    - 0
    gen_shape: false

  optim:
    # =================== Begin of Modified ===================
#    name: fused_adam
    name: distributed_fused_adam
    # =================== End of Modified ===================
    # =================== Begin of Added ===================
    bucket_cap_mb: 200
    overlap_grad_sync: False
    contiguous_grad_buffer: True
    # =================== End of Added ===================
    lr: 3e-6
    weight_decay: 0.01
    betas:
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 10
      constant_steps: 100
      min_lr: 2.0e-6

  rotary_base: 500000.0
  seq_len_interpolation_factor: 32.0
  scale_positional_embedding: true
  # =================== Begin of Modified ===================
#  precision: 16
  precision: ${trainer.precision}
  # =================== End of Modified ===================
  target: nemo.collections.nlp.models.language_modeling.megatron_gpt_model.MegatronGPTModel
  nemo_version: 2.0.0rc2